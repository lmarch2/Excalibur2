Help on package Excalibur2:

NAME
    Excalibur2

DESCRIPTION
    This module provides functionality for ctf pwn.
    Including some common operations in learning and competitions
    
    Welcome all masters to provide advice on the code
    Please visit https://lmarch2.top/posts/8c945bd4/ for code details
    
    --------------------------------------
    Excalibur -- Sword of Contract Victory
    --------------------------------------
    
    Example:
       >>> from Excalibur2 import*

PACKAGE CONTENTS
    Excalibur2
    __update__

FUNCTIONS
    POINTER(...)
    
    ROPgadget(bin, order=None, gr='', option='')
            ------
            Descriptions
            find gadgets you want using ROPgadget
        使用ROPgadget找到想要的gadget
        
            ------
            Parameters
            bin : binary file
            order : gadget you want
            gr : using grep (1) or not (0)
            option : to find a string
        
            ------
            Returns
            gadget
    
    addressof(...)
        addressof(C instance) -> integer
        Return the address of the C instance internal buffer
    
    alignment(...)
        alignment(C type) -> integer
        alignment(C instance) -> integer
        Return the alignment requirements of a C instance
    
    byref(...)
        byref(C instance[, offset=0]) -> byref-object
        Return a pointer lookalike to a C instance, only usable
        as function argument
    
    cl lambda (...)
        # close()
    
    csu(csu_end_addr=0, csu_front_addr=0, r12=0, r13=0, r14=0, r15=0, rbx=0, rbp=1, last=None)
            ------
            Descriptions
        ret2csu utilizes rop chain
            ret2csu利用rop链
            # pop rbx,rbp,r12,r13,r14,r15
        # rbx should be 0,
        # rbp should be 1,enable not to jump
        # r15 should be the function we want to call
        # rdi=edi=r12d
        # rsi=r13
        # rdx=r14
        
            ------
            Parameters
            rbx, rbp, r12, r13, r14, r15 : registers
            csu_end_addr,csu_front_addr, last : gadgets
        
            ------
            Returns
            payload
    
    debug(c=0)
        ------
        Descriptions
        debug
        To use gdb debugging, please use the command line parameter G, such as: python3 exp.py G
        调试
        若要使用gdb调试，请使用命令行参数G，如：python3 exp.py G
        
        ------
        Parameters
        c : gdb attach上进程之后执行的命令字符串 (0)
        
        ------
        Returns
        None
    
    default(mode)
    
    el(arg='pwn')
            ------
            Descriptions
        load elf, default filename pwn
            加载elf，默认文件名是pwn
        
            ------
            Parameters
            arg ： the path of elf
        
            ------
            Returns
            None
    
    elsym(add)
            ------
            Descriptions
        set elfbase for binary
            基址和偏移相加得到真实地址
        
            ------
            Parameters
            add : the addr needed to be added
        
            ------
            Returns
            elfbase + add
    
    fmt(offset, begin, end, size, written)
            ------
            Descriptions
            fmt attack
            fmt攻击
        
            ------
            Parameters
            offset : fmt 偏移
            begin : 将要被写入的地址
            end : 将要写入的地址
            size : 写入的格式化字符串形式
            wriiten : printf函数已写入的字节数
        
            ------
            Returns
            payload
        
            elfbase + add
        # offset（int） - 您控制的第一个格式化程序的偏移量
        # 字典（dict） - 被写入地址对应->写入的数据，可多个对应{addr: value, addr2: value2}
        # numbwritten（int） - printf函数已写入的字节数
        # write_size（str） - 必须是byte，short或int。告诉您是否要逐字节写入，短按short或int（hhn，hn或n）
    
    get_addr32()
            ------
            Descriptions
        Receive leaked 32-bit libc address
            接收泄露的32位libc地址
        
            ------
            Parameters
            None
        
            ------
            Returns
            recieved addr
    
    get_addr64()
            ------
            Descriptions
        Receive leaked 64-bit libc address
            接收泄露的64位libc地址
        
            ------
            Parameters
            None
        
            ------
            Returns
            recieved addr
    
    get_errno(...)
    
    gf lambda (...)
        # getflag
    
    got(fun, *pie_base)
            ------
            Descriptions
        Binary file function got address offset
            二进制文件函数got表地址偏移
        
            ------
            Parameters
            fun : function name
            pie_base (optional) : the binary base when pie enabled
        
            ------
            Returns
            got addr of func
    
    ia lambda (...)
        # interactive()
    
    int16 lambda data
        # int(data,16)
    
    lg lambda name, addr
        # log.success(name+'='+hex(addr))
    
    lib(arg='/usr/lib/x86_64-linux-gnu/libc.so.6')
            ------
            Descriptions
        load libc, default local system libc
            加载libc，默认本地系统libc
        
            ------
            Parameters
            arg ： the path of libc
        
            ------
            Returns
            None
    
    libcsym(fun, off=0)
            ------
            Descriptions
        libc function address offset
            libc文件函数地址偏移
            用于计算一两个libc函数地址时比较方便
        
            ------
            Parameters
            fun : function name
            off (optional) : the libc base when pie enabled
        
            ------
            Returns
            addr of libc func
    
    lisym(add)
            ------
            Descriptions
        set elfbase for binary
            基址和偏移相加得到真实地址
        
            ------
            Parameters
            add : the addr needed to be added
        
            ------
            Returns
            libcbase + add
    
    pack(...)
        pack(format, v1, v2, ...) -> bytes
        
        Return a bytes object containing the values v1, v2, ... packed according
        to the format string.  See help(struct) for more on format strings.
    
    plt(fun, *pie_base)
            ------
            Descriptions
        Binary file function plt address offset
            二进制文件函数plt表地址偏移
        
            ------
            Parameters
            fun : function name
            pie_base (optional) : the binary base when pie enabled
        
            ------
            Returns
            plt addr of func
    
    pointer(...)
    
    pr(addr)
        print abbreviation
        打印
    
    prb(data)
        ------
        Descriptions
        print raw bytes without escaping
        不转义打印原始字符串
        
        ------
        Parameters
        data ： the data you want to print
        
        ------
        Returns
        None
    
    prh(addr)
        print Hexadecimal data abbreviation
        打印十六进制
    
    prhl(addr)
        print length of data abbreviation
        打印数据长度
    
    prl(addr)
        print length of data abbreviation
        打印数据长度
    
    proc(bin='./pwn')
            ------
            Descriptions
        load binary when no command line parameter R provided
            没有命令行参数R时加载二进制文件
        
            ------
            Parameters
            bin ： the path of binary
        
            ------
            Returns
            p
    
    rc lambda data=None
        # recv()
    
    remo(ip, port='')
        ------
        Descriptions
        connect to remote when command line parameter R provided
        有命令行参数R时连接到远程
        
        ------
        Parameters
        ip ： ip of remote 
        port: port of remote
        using remo(ip) when given ip = ip:port or ip = ip port
        using remo(ip,port) when given ip and port
        
        ------
        Returns
        p
    
    resize(...)
        Resize the memory buffer of a ctypes instance
    
    ru lambda delims, drop=True
        # recvuntil(delims,drop)
    
    sd lambda data
        # send(data)
    
    sda lambda delim, data
        # sendafter(delim,data)
    
    searchlibc(fun, real_addr, mode=1, offset=0)
            ------
            Descriptions
        Determine the libc version from the leaked function real address and return /bin/sh string address and system function address
            由泄露的函数真实地址确定libc版本,并返回/bin/sh字符串地址和system函数地址
        
            ------
            Parameters
            fun : function name
            real_addr =: leaked real addr of func
            mode : flag of using libc (1) or libcsearcher (0) 
            offset : the offset between leaked addr and base addr of func
        
            ------
            Returns
            binsh, system
    
    set_errno(...)
    
    setbase(add)
            ------
            Descriptions
        Add the base address and offset to get the real address
            给二进制文件设置基址
        
            ------
            Parameters
            add : the base addr of binary
        
            ------
            Returns
            None
    
    setcontext(ar=64, de=1)
        ------
        Descriptions
        set your structure and debug mode
        设置文件架构和调试模式
        
        ------
        Parameters
        ar : choose arch for amd64 (64) or i386 (32)
        de : using debug mode (1) or not (0)
        
        ------
        Returns
        None
    
    setlibcbase(add)
            ------
            Descriptions
        Add the base address and offset to get the real address
            给libc设置基址
        
            ------
            Parameters
            add : the base addr of binary
        
            ------
            Returns
            None
    
    setterminal(termin='tmux', *args)
        ------
        Descriptions
        set debug terminal
        设置调试终端
        
        ------
        Parameters
        termin : debug terminal (default tmux)
        args (optional) : context.terminal = [termin,args]
        
        ------
        Returns
        None
    
    sizeof(...)
        sizeof(C type) -> integer
        sizeof(C instance) -> integer
        Return the size in bytes of a C instance
    
    sl lambda data
        # sendline(data)
    
    sla lambda delim, data
        # sendlineafter(delim,data)
    
    sym(fun, *pie_base)
            ------
            Descriptions
        Binary file function address offset
            二进制文件函数地址偏移
        
            ------
            Parameters
            fun : function name
            pie_base (optional) : the binary base when pie enabled
        
            ------
            Returns
            addr of func
    
    uu32 lambda data
        # u32(data.ljust(4,b'\x00'))
    
    uu64 lambda data
        # u64(data.ljust(8,b'\x00'))

DATA
    API_FIND = 'https://libc.rip/api/find'
    API_LIBC = 'https://libc.rip/api/libc/'
    DEFAULT_MODE = 0
    GB = 1000000000
    GiB = 1073741824
    HEADERS = {'Content-Type': 'application/json'}
    KB = 1000
    KiB = 1024
    MB = 1000000
    MiB = 1048576
    PIPE = -1
    PTY = <pwnlib.tubes.process.PTY object>
    RTLD_GLOBAL = 256
    RTLD_LOCAL = 0
    STDOUT = -2
    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...
    arg_doc = {'p': 'number (int): Number to convert', 'u': 'data (bytes):...
    args = PwnlibArgs(<class 'str'>, {})
    cdll = <ctypes.LibraryLoader object>
    context = ContextType()
    cyclic_pregen = b''
    de_bruijn_gen = <generator object de_bruijn.<locals>.db>
    default_style = {'00': functools.partial(<function Module._decorator.<...
    division = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 1310...
    elfbase = 0
    ends = ['b', 'l']
    libcbase = 0
    log = <pwnlib.log.Logger object>
    memmove = <CFunctionType object>
    memset = <CFunctionType object>
    op_verbs = {'p': 'pack', 'u': 'unpack'}
    ops = ['p', 'u']
    pydll = <ctypes.LibraryLoader object>
    pythonapi = <PyDLL 'None', handle 7ffbee8302e0>
    return_types = {'p': 'bytes', 'u': 'int'}
    rv_doc = {'p': 'The packed number as a byte string', 'u': 'The unpacke...
    signs = ['s', 'u']
    sizes = {8: 'b', 16: 'h', 32: 'i', 64: 'q'}
    variables = {0: {'name': 'flags', 'size': 0}, 1: {'name': '_IO_read_pt...
    version = '4.12.0'

FILE
    /home/lctfer/.local/lib/python3.10/site-packages/Excalibur2/__init__.py


